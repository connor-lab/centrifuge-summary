#!/usr/bin/env python3

import argparse
import csv
from pathlib import Path
import shlex
import shutil
from subprocess import run, PIPE
import sys

# Collect arguments
parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("-t", "--taxon-name", dest="taxonname", help="Scientific name of the taxon to count reads beneath [e.g. Escherichia]")
group.add_argument("-i", "--taxon-id", dest="taxID", help="NCBI taxID to count reads beneath [e.g. 561]")
parser.add_argument("-r", "--report-file", dest="reportfile", required=True, help="Path to the centrifuge report-file to summarise")
args = parser.parse_args()

# Get the input taxon name
taxonName = args.taxonname

# Find path to the centrifuge report file
centrifugeReport = Path(args.reportfile).resolve()

# Find path to taxonkit (like "which")
taxonKit = shutil.which("taxonkit")

# Run the taxonkit name2taxid command if taxon name provided
if args.taxonname is not None:
    name2Taxid = shlex.split(taxonKit + " name2taxid")
    p = run(name2Taxid, input=taxonName, encoding='ascii', stdout=PIPE)
    taxIDstdout = p.stdout.strip().split('\t')
    # Check that the output from the taxkit command is sane
    if len(taxIDstdout) == 2:
        taxID = taxIDstdout[1]
    else:
        print("Taxon name not found. Please check taxon name")
        exit(1)
else:
    taxID = args.taxID
    taxid2Name = shlex.split(taxonKit + " list --show-name --indent \"\" --ids " + taxID)
    p = run(taxid2Name, stdout=PIPE)
    taxid2NameStdout = p.stdout.decode().strip().splitlines()[0]
    taxonName = taxid2NameStdout.partition(' ')[2]


# Run the taxonkit list command to get all taxids associated with the taxon name
taxid2List = shlex.split(taxonKit + " list --indent \"\" --ids " + taxID)
p = run(taxid2List, stdout=PIPE)
taxIDstdout = p.stdout.decode().strip().splitlines()

#print(taxIDstdout)

# Read centrifuge report file 
with open(centrifugeReport, newline = '') as tabfile:
    # Read each line into dict using csv module, but with tab as the delimiter
    reader = csv.DictReader(tabfile, delimiter='\t')
    # Init list and append numReads to it if taxID from centrifuge report matches taxID from taxonkit list
    taxIDMatches = []
    for row in reader:
        if row['taxID'] in taxIDstdout:
            taxIDMatches.append(int(row['numReads']))

# Check that we found some reads matching the list of taxIDs and sum the list
if len(taxIDMatches) > 0:
    total = str(sum(taxIDMatches))
    print(taxonName + "\t" + total)
else:
    print("No matching reads found in this sample")
